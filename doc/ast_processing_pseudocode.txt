Using the grammar defined by:

    START = WS? { RULE WS? }+ $ ; 

    WS = { T_WHITESPACE | T_COMMENT }+ ;
    RULE = T_IDENTIFIER WS? '=' WS? EXPR WS? ';' ;

    EXPR     = EXPR_AND    { WS? '|' WS? EXPR_AND    } ; 
    EXPR_AND = EXPR_ASSERT { WS?         EXPR_ASSERT } ; 

    EXPR_ASSERT = LOOKAHEAD? (* No WS *) EXPR_UNIT ;

    EXPR_UNIT = EXPR_GROUP
              | EXPR_MAYBE
              | EXPR_MANY
              | EXPR_ANY
              | EXPR_IDENTIFIER
              | EXPR_TERMINAL ;
    LOOKAHEAD = T_LOOK_IS
              | T_LOOK_IS_NOT ;

    EXPR_GROUP = '(' WS? EXPR WS? ')' (* No WS *) QUANTITY? ;
    EXPR_MAYBE = '[' WS? EXPR WS? ']' ;
    EXPR_MANY  = '{' WS? EXPR WS? '}+' ;
    EXPR_ANY   = '{' WS? EXPR WS? '}' ;
    EXPR_IDENTIFIER = T_IDENTIFIER (* No WS *) QUANTITY? ;
    EXPR_TERMINAL = REGEX
                  | T_STRING
                  | T_EOF_SYMBOL
                  | T_NIL_SYMBOL ;

    QUANTITY = T_QUANT_MAYBE
             | T_QUANT_ANY
             | T_QUANT_MANY ;

    REGEX = '/' (* FIXME *) '/' ;

    T_COMMENT     = /\(\*(.|\s)*?\*\)/ ;
    T_EOF_SYMBOL  = '$' ;
    T_IDENTIFIER  = /[a-zA-Z]\w*/ ;
    T_LOOK_IS     = '&' ;
    T_LOOK_IS_NOT = '!' ;
    T_NIL_SYMBOL  = '~' ;
    T_QUANT_ANY   = '*' ;
    T_QUANT_MANY  = '+' ;
    T_QUANT_MAYBE = '?' ;
    T_STRING      = /'([^\\']|\\.)*'|"([^\\"]|\\.)*"/ ;
    T_WHITESPACE  = /\s+/ ;

Produce the AST generated by parsing:

    WS = { T_WHITESPACE | T_COMMENT }+ ;

========

CHC = Choice
GRP = Group
RPT = Repeat

========

<START>
GRP[RPT[] RPT[GRP[<RULE> RPT[]]]]
                  GRP[<T_IDENTIFIER> RPT[<WS>] "="                 RPT[<WS>]                         <EXPR> RPT[<WS>] ";"]
                      /WS/               RPT[CHC[0, <T_WHITESPACE>]]   RPT[CHC[0, <T_WHITESPACE>]]   *0*        RPT[CHC[0, <T_WHITESPACE>]]
                                                    / /                           / /                                      / /

--------

*0*
GRP[<EXPR_AND> RPT[]]
    GRP[<EXPR_ASSERT> RPT[]]
        GRP[RPT[] <EXPR_UNIT>]
                  CHC[2, <EXPR_MANY>]
                         GRP["{" RPT[<WS>]                         <EXPR> RPT[<WS>] "}+"]
                                     RPT[CHC[0, <T_WHITESPACE>]]   *1*        RPT[CHC[0, <T_WHITESPACE>]]
                                                / /                                      / /

--------

*1*
GRP[<EXPR_AND>, RPT[GRP[RPT[<WS>]                        "|" RPT[<WS>] <EXPR_AND>]]
    GRP[<EXPR_ASSERT>       RPT[CHC[0, <T_WHITESPACE>]]          RPT[CHC[0, <T_WHITESPACE>]]
        GRP[RPT[] <EXPR_UNIT>]         / /                                  GRP[RPT[] <EXPR_UNIT>]
                  CHC[4, <EXPR_IDENTIFIER>]                                           CHC[4, <EXPR_IDENTIFIER>]
                         GRP[<T_IDENTIFIER> RPT[]]                                           GRP[<T_IDENTIFIER> RPT[]]
                             /T_WHITESPACE/                                                      /T_COMMENT/



